# Group Users
Users of the blogging platform.

A User resource has the following attributes:

- **Id**: (int, required) Unique identifier of the resource
- **NewsquidUserId**: (int, required) The unique identifier of the user resource in NEWSQUID corresponding to the user resource
- **CreatedAt**: (datetime, required) The time of creation of the resource 
- **UpdatedAt**: (datetime, required) The time of last update of the resource 
- **Name**: (string, required) The name of the user 
- **Email**: (string, required) The email of the user 
- **Title**: (string, optional) The title of the user (such as 'Freelance writer' or 'Spare time publisher') 
- **Description**: (string, optional) A description of the user 
- **FacebookLink**: (string, optional) A link to the Facebook page of the user 
- **TwitterLink**: (string, optional) A link to the Twitter page of the user
- **GooglePlusLink**:(string, optional) A link to the Google+ page of the user
- **LinkedInLink**: (string, optional) A link to the LinkedIn page of the user
- **WebsiteLink**: (string, optional) A link to the personal website/blog of the user

The attributes *Id*, *NewsquidUserId*, *CreatedAt*, and *UpdatedAt* are set by the TrunkTrunk API.

## -> /users{?search} [/users{?search}]

+ Parameters
    + search (required, string, `lars`) ... Search term to matched against email and/or name of users.

### Search [GET]
Get a list of users, based on a search on their name and email

Anyone can do this request. The caller does not need to be signed in.

+ Response 200 (application/json)

        [
          {
            "Id": 1, 
            "NewsquidUserId": 7, 
            "CreatedAt": "2014-04-14T02:15:15Z", 
            "UpdatedAt": "2014-04-14T02:15:15Z", 
            "Name": "Lars",
            "Email": "user1@example.org",
            "Title": "Freelance writer", 
            "Description": "Description of User 1",
            "FacebookLink": "",
            "TwitterLink": "",
            "GooglePlusLink": "",
            "LinkedInLink": "",
            "WebsiteLink": ""
          },
            "Id": 1, 
            "NewsquidUserId": 8, 
            "CreatedAt": "2014-04-14T02:15:15Z", 
            "UpdatedAt": "2014-04-14T02:15:15Z", 
            "Name": "User 2",
            "Email": "LarsMan@example.org",
            "Title": "Freelance writer", 
            "Description": "Description of User 2",
            "FacebookLink": "",
            "TwitterLink": "",
            "GooglePlusLink": "",
            "LinkedInLink": "",
            "WebsiteLink": ""
          }
        ]


## -> /users/current [/users/current]

### Get [GET]
Get the user currently logged in.

Any signed in user can do this request.

+ Response 200 (application/json)

        {
          "Id": 1, 
          "NewsquidUserId": 7, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Name": "User 1",
          "Email": "user1@example.org",
          "Title": "Freelance writer", 
          "Description": "Description of User 1",
          "FacebookLink": "",
          "TwitterLink": "",
          "GooglePlusLink": "",
          "LinkedInLink": "",
          "WebsiteLink": ""
        }


### Update [PUT]
Update the user information of the current user.

Any signed in user can do this request.

+ Request (application/json)

        {
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Name": "Updated User 1",
          "Email": "user1@example.org",
          "Title": "Freelance writer", 
          "Description": "New description of User 1",
          "FacebookLink": "facebook.com/user1",
          "TwitterLink": "twitter.com/user1",
          "GooglePlusLink": "plus.google.com/user1",
          "LinkedInLink": "linkedin.com/user1",
          "WebsiteLink": "http://www.trunktrunk.com/user1"
        }

+ Response 201 (application/json)

        {
          "Id": 1, 
          "NewsquidUserId": 7, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Name": "Updated User 1",
          "Email": "user1@example.org",
          "Title": "Freelance writer", 
          "Description": "New description of User 1",
          "FacebookLink": "facebook.com/user1",
          "TwitterLink": "twitter.com/user1",
          "GooglePlusLink": "plus.google.com/user1",
          "LinkedInLink": "linkedin.com/user1",
          "WebsiteLink": "http://www.trunktrunk.com/user1"
        }


## -> /users/{id} [/users/{id}]

+ Parameters
    + id (required, number, `1`) ... Id of the user.

### Get [GET]
Get the user with the given id.

Anyone can do this request. The caller does not need to be signed in.

+ Response 200 (application/json)

        {
          "Id": 1, 
          "NewsquidUserId": 7, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Name": "User 1",
          "Email": "user1@example.org",
          "Title": "Freelance writer", 
          "Description": "Description of User 1",
          "FacebookLink": "",
          "TwitterLink": "",
          "GooglePlusLink": "",
          "LinkedInLink": "",
          "WebsiteLink": ""
        }


## -> /users/group/{id} [/users/group/{id}{?items_per_page,page}]

+ Parameters
    + id (required, number, `1`) ... Id of the group.
    + items_per_page (optional, number, `1`) ... How many users to return per request.
    + page (optional, number, `1`) ... How many *items_per_page* to skip.

### Get [GET]
Get all users of the group with the given id.

Anyone can do this request. The caller does not need to be signed in.

+ Response 200 (application/json)

        [
            {
              "Id": 1, 
              "NewsquidUserId": 7, 
              "CreatedAt": "2014-04-14T02:15:15Z", 
              "UpdatedAt": "2014-04-14T02:15:15Z", 
              "Name": "User 1",
              "Email": "user1@example.org",
              "Title": "Freelance writer", 
              "Description": "Description of User 1",
              "FacebookLink": "",
              "TwitterLink": "",
              "GooglePlusLink": "",
              "LinkedInLink": "",
              "WebsiteLink": ""
            },
            {
              "Id": 3, 
              "NewsquidUserId": 23, 
              "CreatedAt": "2014-04-14T02:15:15Z", 
              "UpdatedAt": "2014-04-14T02:15:15Z", 
              "Name": "User 3",
              "Email": "user3@example.org",
              "Title": "Freelance publisher", 
              "Description": "Description of User 3",
              "FacebookLink": "http://facebook.com/user3",
              "TwitterLink": "http://twitter.com/user3",
              "GooglePlusLink": "",
              "LinkedInLink": "",
              "WebsiteLink": ""
            }
        ]
