# Group Posts
Posts (articles).

A Post resource has the following attributes:

- **Id**: (int, required) Unique identifier
- **UserId**: (int, required) Id of the user who owns/created the posts.
- **CreatedAt**: (datetime, required) The time of creation of the resource
- **UpdatedAt**: (datetime, required) The latest time of modification of the resource
- **Title**: (string, required) The post title
- **Content**: (string, required) The post content (the text of the article)
- **Tags**: (list of strings, required) List of unique post tags (strings) describing the post
- **ImageUrl**: (string, option) Url of the post image
- **ImageCaption**: (string, optional) The caption of the post image
- **Price**: (decimal, required) The price of the post. If set to 0.0, the post is free.
- **NewsquidProductId**: (int, optional) The integer of the product in NEWSQUID corresponding to the post, if such a product exists.
- **DraftRevisionId**: (int, required) The revision number of the newest post revision.
- **PublishedRevisionId**: (int, optional) The revision number of the post revision currently published. I 0, the post is not published.
- **GroupId**: (int, optional) The id of the group to which the post belong. If set to 0, the post is considered part of no group.

The attributes *Id*, *Revision*, *CreatedAt*, *UpdatedAt*, *OwnerId*, *DraftRevisionId*, and *PublishedRevisionId* are set by the TrunkTrunk API.

The fields **Content** and **Tags** are required only when publishing a post. They can be empty, when the post is a draft.


## -> /posts [/posts]

### Create [POST]
Create a new post. The post is not published per default.

Any signed in user can create a post.

+ Request (application/json)

        {
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "GroupId": 0
        }

+ Response 201 (application/json)

        {
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 1, 
          "PublishedRevisionId": 0,
          "GroupId": 0
        }

### Update [PUT]
Update a post. The changes are saved as a draft and are not published. If a
previous version of the post is published, this remains the case (the published
version of post is not altered).

Only the creator of a post can update it.

+ Request (application/json)

        {
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 1, 
          "PublishedRevisionId": 1,
          "GroupId": 0
        }

+ Response 201 (application/json)

        {
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 2, 
          "PublishedRevisionId": 1,
          "GroupId": 0
        }


## -> /posts/publish [/posts/publish]

### Update [PUT]
Update a post. the changes are published. If a previous version of the post is
already published, the previous version is replaced with the new version.

Only the creator of a post can update it.

+ Request (application/json)

        {
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 1, 
          "PublishedRevisionId": 1,
          "GroupId": 0
        }

+ Response 201 (application/json)

        {
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 2, 
          "PublishedRevisionId": 2,
          "GroupId": 0
        }


## -> /posts/{id} [/posts/{id}]

+ Parameters
    + id (required, number, `1`) ... Id of the Post.

### Get [GET]
Get the latest published version of the post with the given id.

Anyone can get a post by its id. It does not require that the caller is signed in.

+ Response 200 (application/json)

        {
          "Id": 1, 
          "UserId": 1,
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1<br /><br />And a guy!<img src='https://ttmediafiles.s3.amazonaws.com/uploads/inline_media/9/Sk__rmbillede_2014-02-14_kl._12.08.59.png'>",
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 1, 
          "PublishedRevisionId": 1,
          "GroupId": 1
        }

### Delete [DELETE]
Delete the post with the given id.

Only the creator of a post can delete it.

+ Response 204


## -> /posts/{id}/draft [/posts/{id}/draft]

+ Parameters
    + id (required, number, `1`) ... Id of the Post.

### Get [GET]
Get the latest draft of the post with the given id.

Only the creator of a post can get the draft.

+ Response 200 (application/json)

        {
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 5, 
          "PublishedRevisionId": 2,
          "GroupId": 0
        }


##  -> /posts/user/{id} [/posts/user/{id}{?items_per_page,page}]

+ Parameters
    + id (required, number, `1`) ... Id of the user.
    + items_per_page (optional, number, `1`) ... How many posts to return per request.
    + page (optional, number, `1`) ... How many *items_per_page* to skip.

### Get [GET]
Get all published posts of the user with the given id.

Anyone get do this request. It does not require that the caller is signed in.

+ Response 200 (application/json)

        [{
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 3, 
          "PublishedRevisionId": 3,
          "GroupId": 2
        }, {
          "Id": 2, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 2", 
          "Content": "Content of Post 2", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ag.arizona.edu/yavapai/graphics/bamboo.jpg",
          "ImageCaption": "Image caption of Post 2",
          "Price": 1.1,
          "NewsquidProductId": 7,
          "DraftRevisionId": 2, 
          "PublishedRevisionId": 2,
          "GroupId": 7
        }]


## -> /posts/group/{id} [/posts/group/{id}{?items_per_page,page}]

+ Parameters
    + id (required, number, `1`) ... Id of the group.
    + items_per_page (optional, number, `1`) ... How many posts to return per request.
    + page (optional, number, `1`) ... How many *items_per_page* to skip.

### Get [GET]
Get all published posts of the group with the given id.

Anyone get do this request. It does not require that the caller is signed in.

+ Response 200 (application/json)

        [{
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 3, 
          "PublishedRevisionId": 3,
          "GroupId": 0
        }, {
          "Id": 2, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 2", 
          "Content": "Content of Post 2", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ag.arizona.edu/yavapai/graphics/bamboo.jpg",
          "ImageCaption": "Image caption of Post 1",
          "Price": 2.2,
          "NewsquidProductId": 7,
          "DraftRevisionId": 2, 
          "PublishedRevisionId": 2,
          "GroupId": 4
        }]



## -> /posts/featured [/posts/featured]

### Get [GET]
Get all featured posts (the posts that appear on the front page of TrunkTrunk).

Anyone get do this request. It does not require that the caller is signed in.

+ Response 200 (application/json)

        [{
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 3, 
          "PublishedRevisionId": 3,
          "GroupId": 0
        }, {
          "Id": 2, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 2", 
          "Content": "Content of Post 2", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ag.arizona.edu/yavapai/graphics/bamboo.jpg",
          "ImageCaption": "Image caption of Post 1",
          "Price": 3.1,
          "NewsquidProductId": 7,
          "DraftRevisionId": 2, 
          "PublishedRevisionId": 2,
          "GroupId": 0
        }]


## -> /posts{?search} [/posts{?search,items_per_page,page}]

+ Parameters
    + search (required, string) ... Search string. The terms with which to search.
    + items_per_page (optional, number, `1`) ... How many posts to return per request.
    + page (optional, number, `1`) ... How many *items_per_page* to skip.

### Search for posts [GET]
Retrieve all published posts matching the given search parameter (fuzzy
search).

+ Response 200 (application/json)

        [{
          "Id": 1, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 1", 
          "Content": "Content of Post 1", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ttmediafiles.s3.amazonaws.com/uploads/media/150/article-main-image",
          "ImageCaption": "Image caption of Post 1",
          "Price": 0,
          "NewsquidProductId": 0,
          "DraftRevisionId": 3, 
          "PublishedRevisionId": 3,
          "GroupId": 3
        }, {
          "Id": 2, 
          "CreatedAt": "2014-04-14T02:15:15Z", 
          "UpdatedAt": "2014-04-14T02:15:15Z", 
          "Title": "Post 2", 
          "Content": "Content of Post 2", 
          "Tags": [
            "Tag 1", "Tag 2", "Tag 3"
          ],
          "ImageUrl": "https://ag.arizona.edu/yavapai/graphics/bamboo.jpg",
          "ImageCaption": "Image caption of Post 2",
          "Price": 0.1,
          "NewsquidProductId": 7,
          "DraftRevisionId": 2, 
          "PublishedRevisionId": 2,
          "GroupId": 0
        }]
